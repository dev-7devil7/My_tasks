AWSTemplateFormatVersion: '2010-09-09'

Resources:
  
  FilmTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: star-wars
      AttributeDefinitions:
        - AttributeName: title
          AttributeType: S
      KeySchema:
        - AttributeName: title
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  ProcessFilm:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - film-info
      Name: film_info
      State: ENABLED
      Targets: 
       - Arn: !GetAtt BridgeLambdaFunction.Arn
         Id: BridgeLambdaFunction

  WriteToSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BridgeLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProcessFilm.Arn


  StarWarsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess 
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess


  PowerTools:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: powertools
      Description: customs layer for powertools
      Content:
        S3Bucket: student-post-data
        S3Key: powertools.zip
      CompatibleRuntimes:
        - python3.9


  BridgeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bridge_lambda
      Handler: bridge_lambda.lambda_handler
      Runtime: python3.9
      Role: !GetAtt StarWarsRole.Arn
      Code:
        S3Bucket: student-post-data
        S3Key:  bridge_lambda.zip
      Timeout: 600
      Layers:
        - !Ref PowerTools      

  ProcessLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: process_lambda
      Handler: process_lambda.lambda_handler
      Runtime: python3.9
      Role: !GetAtt StarWarsRole.Arn
      Code:
        S3Bucket: student-post-data
        S3Key: process_lambda.zip
      Timeout: 30
      Layers:
        - !Ref PowerTools

  EventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt StarWarsQueue.Arn
      FunctionName: !GetAtt ProcessLambdaFunction.Arn

  StarWarsQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "starwars_queue"
      DelaySeconds: 0
      VisibilityTimeout: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InvalidQueue.Arn
        maxReceiveCount: 3


  InvalidQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "starwars_dlq"
      VisibilityTimeout: 30


  StarwarsSNS:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "Stars War DLQ Notification"
      TopicName: "starwars_dlq_notification"

  StarwarsSNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Protocol: "email"
      TopicArn: !Ref StarwarsSNS
      Endpoint: "dev7.rasineni@gmail.com"

  CloudWatchAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: "StarWars Alarm"
      ActionsEnabled: true
      OKActions:
        - !Ref StarwarsSNS
      AlarmActions:
        - !Ref StarwarsSNS
      InsufficientDataActions:
        - !Ref StarwarsSNS
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: "AWS/SQS"
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt InvalidQueue.QueueName
